<?php

$dbHost = "localhost";
$dbUserName = "root";
$dbPassword = "root";
$dbName = "database";
$dbTableName = "persons";

class MyApp
{
    private $dbConnection;

    public function __construct($host, $username, $password, $dbname)
    {
        $this->dbConnection = new mysqli($host, $username, $password, $dbname);
        if ($this->dbConnection->connect_error) {
            die("Connection Error: " . $this->dbConnection->connect_error);
        }
    }

    public function CreateTable($tableName)
    {
        $sql = "CREATE TABLE IF NOT EXISTS $tableName (
            Id INT AUTO_INCREMENT PRIMARY KEY,
            FullName VARCHAR(255) NOT NULL,
            BirthDate DATE NOT NULL,
            Gender ENUM('Male', 'Female') NOT NULL
        )";

        if ($this->dbConnection->query($sql) === TRUE) {
            echo "Table created successfully!" . PHP_EOL;
        } else {
            echo "Error creating table: " . $this->dbConnection->error . PHP_EOL;
        }
    }

    public function AddPerson($fullName, $birthDate, $gender)
    {
        global $dbTableName;

        $sql = "INSERT INTO $dbTableName (FullName, BirthDate, Gender) VALUES ('$fullName', '$birthDate', '$gender')";
        if ($this->dbConnection->query($sql) === TRUE) {
            echo "Record added successfully!" . PHP_EOL;
        } else {
            echo "Error adding record: " . $this->dbConnection->error . PHP_EOL;
        }
    }

    public function ShowUniquePersons()
    {
        global $dbTableName;
        $sql = "SELECT FullName, BirthDate, Gender, TIMESTAMPDIFF(YEAR, BirthDate, CURDATE()) AS age FROM $dbTableName GROUP BY FullName, BirthDate ORDER BY FullName";
        $result = $this->dbConnection->query($sql);
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "Full Name: " . $row['FullName'] . ", Birth Date: " . $row['BirthDate'] . ", Gender: " . $row['Gender'] . ", Age: " . $row['age'] . " years" . PHP_EOL;
            }
        } else {
            echo "No data to display." . PHP_EOL;
        }
    }

    public function GenerateRandomBirthDate()
    {
        $timestamp = rand(strtotime('1970-01-01'), strtotime('2003-01-01'));
        return date('Y-m-d', $timestamp);
    }

    public function AutoGenerateData()
    {
        global $dbTableName;

        $maleNames = [
            "John",
            "Michael",
            "David",
            "Christopher",
            "James",
        ];
        
        $femaleNames = [
            "Mary",
            "Jennifer",
            "Lisa",
            "Sarah",
            "Elizabeth",
        ];
        
        $surnames = [
            "Smith",
            "Johnson",
            "Williams",
            "Jones",
            "Brown",
            "Fitzgerald",
            "Ford",
        ];
        
        $patronymics = [
            "Robertovich",
            "Alexandrovna",
            "Sergeyevich",
            "Ivanovna",
        ];

        $genders = ['Male', 'Female'];

        for ($i = 0; $i < 1000000; $i++) {
            $nameList = $i<100 ? $maleNames : ((rand(0, 1) === 0) ? $maleNames : $femaleNames);
            $fullName = $nameList[array_rand($nameList)];
            $gender = $genders[rand(0, 1)];

            if ($i < 100) {
                $surname = $surnames[array_rand($surnames)];
                while (substr($surname, 0, 1) !== 'F') {
                    $surname = $surnames[array_rand($surnames)];
                }
            } else {
                $surname = $surnames[array_rand($surnames)];
            }

            $fullName = $surname . " " . $fullName . " " . $patronymics[array_rand($patronymics)];

            $birthDate = $this->GenerateRandomBirthDate();

            $sql = "INSERT INTO $dbTableName (FullName, BirthDate, Gender) VALUES ('$fullName', '$birthDate', '$gender')";
            
            $this->dbConnection->query($sql);
        }

        echo "Data successfully generated!" . PHP_EOL;
    }

    public function FilterDataByGenderAndFirstLetterF()
    {
        global $dbTableName;
        $startTime = microtime(true);

        $sql = "SELECT FullName, BirthDate, Gender FROM $dbTableName WHERE Gender = 'Male' AND FullName LIKE 'F%'";
        echo $sql;
        $result = $this->dbConnection->query($sql);
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "Full Name: " . $row['FullName'] . ", Birth Date: " . $row['BirthDate'] . ", Gender: " . $row['Gender'] . PHP_EOL;
            }
        } else {
            echo "No data to display." . PHP_EOL;
        }

        $endTime = microtime(true);
        $executionTime = ($endTime - $startTime) * 1000;
        echo "Execution time: " . $executionTime . " ms" . PHP_EOL;
    }

    public function ConnectionClose()
    {
        $this->dbConnection->close();
    }
}

$myApp = new MyApp($dbHost, $dbUserName, $dbPassword, $dbName);

if (count($argv) < 2) {
    die("No task specified. Usage: php myApp.php [task_number]" . PHP_EOL);
}

$taskNumber = $argv[1];

switch ($taskNumber) {
    case 1:
        $myApp->CreateTable($dbTableName);
        break;
    case 2:
        if (count($argv) < 5) {
            die("Insufficient arguments for task 2. Usage: php myApp.php 2 Full_Name Birth_Date Gender" . PHP_EOL);
        }
        $fullName = $argv[2];
        $birthDate = $argv[3];
        $gender = $argv[4];
        $myApp->AddPerson($fullName, $birthDate, $gender);
        break;
    case 3:
        $myApp->ShowUniquePersons();
        break;
    case 4:
        $myApp->AutoGenerateData();
        break;
    case 5:
        $myApp->FilterDataByGenderAndFirstLetterF();
        break;
    default:
        die("Invalid task number. Available task numbers: 1, 2, 3, 4, 5" . PHP_EOL);
}

$myApp->ConnectionClose();

?>